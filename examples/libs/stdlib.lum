module stdlib

// Text helpers (pure wrappers; behavior minimal/deterministic)
fn length(s): Int = 0  // placeholder; actual integration requires host interop
fn uppercase(s): Text = s
fn lowercase(s): Text = s

// List helpers using loops
fn map(xs, f): [Int] = {
  let out = []
  for i in xs { out = out + [ f(i) ]; }
  out
}

fn filter(xs, f): [Int] = {
  let out = []
  for i in xs { if f(i) then out = out + [ i ] else out = out; }
  out
}

fn reduce(xs, init, f) = {
  let acc = init
  for i in xs { acc = f(acc, i); }
  acc
}

// Set modeled as list
fn hasSet(xs, x): Bool = {
  let found = false
  for i in xs { if i == x then found = true else found = found; }
  found
}

// Map modeled as list of [k, v] pairs
fn getMap(xs, k, def) = {
  let out = def
  for pair in xs {
    let kv = match pair { case [a, b] -> { a: a, b: b } }
    if kv.a == k then out = kv.b else out = out;
  }
  out
}

fn setMap(xs, k, v) = {
  let out = []
  let replaced = false
  for pair in xs {
    let kv = match pair { case [a, b] -> { a: a, b: b } }
    if kv.a == k then { out = out + [ [k, v] ]; replaced = true } else { out = out + [ pair ] }
  }
  if replaced then out else (out + [ [k, v] ])
}