import "../libs/option_result.lum"

let a = 10
let b = 2
let c = 0

// Ok path
let r1 = match b {
  0 -> option_result.Err("div by zero")
  _ -> option_result.Ok(a / b)
}
// apply mapRes to increment Ok value by 1
let r2 = option_result.mapRes(r1, 1)

// Err path
let r3 = match c {
  0 -> option_result.Err("div by zero")
  _ -> option_result.Ok(a / c)
}
// chain with andThenRes: since r3 is Err, it propagates
let r4 = option_result.andThenRes(r3, option_result.Ok(42))

// annotated function returning Result (informational in current checker)
fn demo(x): Result = match x {
  0 -> option_result.Err("div by zero")
  _ -> option_result.Ok(x)
}